<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[kiya's pigsty]]></title>
  <subtitle><![CDATA[No Further Delay!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://kiya-z.github.io/"/>
  <updated>2015-11-11T08:23:28.367Z</updated>
  <id>http://kiya-z.github.io/</id>
  
  <author>
    <name><![CDATA[Kiya]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python 之 接口和多态引发的血案]]></title>
    <link href="http://kiya-z.github.io/2015/11/11/Python%20%E4%B9%8B%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%A4%9A%E6%80%81%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/"/>
    <id>http://kiya-z.github.io/2015/11/11/Python 之 接口和多态引发的血案/</id>
    <published>2015-11-11T07:52:39.000Z</published>
    <updated>2015-11-11T08:23:28.367Z</updated>
    <content type="html"><![CDATA[<h1 id="事故发生地">事故发生地</h1><p>在学习<a href="http://www.maiziedu.com/course/python/545-7480/" target="_blank" rel="external"> Python 面向对象视频 之 鸭子类型与多态 </a>时看到这样两句话不得其解：</p>
<blockquote>
<p>非动态语言必须通过继承和接口实现多态<br>动态语言不需要实现接口</p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="菜鸟的问题">菜鸟的问题</h1><p>(非动态语言以 Java 为例，动态语言以 Python 为例)</p>
<ol>
<li>接口和多态是什么关系？</li>
<li>Python 为什么没有接口？没有接口怎么实现接口对应的设计模式</li>
<li>Python 为什么没有重载？</li>
<li>Python 的多态是什么样的？</li>
</ol>
<hr>
<h2 id="接口和多态是什么关系？">接口和多态是什么关系？</h2><p>  在我的理解中，多态具有两种形式，重载和重写：</p>
<blockquote>
<p><strong>重载</strong>：<em>在同一个类中</em>，相同的方法名对应着不同的方法实现，其区别在于他们需要的参数和返回值不同。<br><strong>重写</strong>：<em>用于父类和子类间</em>，子类重写父类的方法，只是对应的方法实现不同，其方法名和参数都相同。</p>
</blockquote>
<p>这样看来，重写是基于继承的。那么接口呢？好像除了强制要求子类实现某些方法，我不知道还有什么别的作用。<br>正因如此，接口只是一个规范。在多个类都实现一个接口的时候他的作用就体现出来了，我们不需要知道在某个类中这个方法的具体实现，只需要这个类中有这个方法而我们可以直接调用就可以了。有了这样一个统一的标准，我们就不必担心同样功能的方法被起了各种各样的名字了。<br>所以，我觉得可以用这么一句话回答这个问题，<strong>接口不是实现多态的，而是基于多态的，有了多态接口才能发挥作用</strong>。</p>
<hr>
<h2 id="Python_为什么没有接口？没有接口怎么实现接口对应的设计模式">Python 为什么没有接口？没有接口怎么实现接口对应的设计模式</h2><p>接口的作用就是规范，规范参数类型，返回值等等，从而使相同的调用能够实现不同的效果；并且接口也是为了用来弥补语言自己表达能力的不足，如：Java 只支持单继承，为了使类拥有更多的特性，使用了多实现来弥补。静态的语言必须全部都规定好才能正确使用。<br>而在 Python  中，变量是没有类型的，不需要事先规定，不管调用者传入什么类型的对象，被调用者就会认为那就是我所需要的对象(鸭子类型)，如果在运行时传入的对象不具备需要的属性或方法，程序会直接报错。需要实现这个方法的话，就照实现就是了，返回和形参不限制类型，比如：在创建了类的实例后，动态地给该实例加上一个函数属性。这就是动态类型的优势。<br>这种风格被称为“<strong>鸭子类型</strong>”：</p>
<blockquote>
<p>在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由”当前方法和属性的集合”决定。<br>在我想成为鸭子的时候，不是我必须真的是个鸭子，而是我的行为表现的像是个鸭子，那我就是个鸭子</p>
</blockquote>
<p>相关概念 - “<strong>鸭子测试</strong>”：</p>
<blockquote>
<p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”<br>“换言之，不要检查它是不是一个鸭子：检查它像不像一个鸭子地叫，等等。取决于你需要哪个像鸭子的行为的子集来使用语言。”</p>
</blockquote>
<hr>
<h2 id="Python_为什么没有重载？">Python 为什么没有重载？</h2><blockquote>
<p>函数重载主要是为了解决两个问题：</p>
<ol>
<li>可变参数类型。</li>
<li>可变参数个数。</li>
</ol>
</blockquote>
<p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。<br><em>对于情况 1</em>，函数功能相同，但是参数类型不同，Python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 Python 中很可能是相同的代码，没有必要做成两个不同函数。<br><em>对于情况 2</em> ，函数功能相同，但参数个数不同，Python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。<br>好了，鉴于情况 1 跟 情况 2 都有了解决方案，Python 自然就不需要函数重载了。</p>
<hr>
<h2 id="Python_的多态是什么样的？">Python 的多态是什么样的？</h2><p>多态即多种形态，在运行时确定其状态，在编译阶段无法确定其类型，这就是多态。<br>1）Python是解释性语言。不进行预编译，因此它就只在运行时确定其状态；<br>2）Python中变量是弱类型的。在定义时不用指明其类型，它会根据需要在运行时确定变量的类型。</p>
<hr>
<blockquote>
<p>结语：一些粗浅之语，有长进再补充。</p>
</blockquote>
<hr>
<h1 id="Reference：">Reference：</h1><p><a href="http://www.zhihu.com/question/20111251" target="_blank" rel="external"> Java 中的接口有什么作用？</a><br><a href="http://www.zhihu.com/question/20685467" target="_blank" rel="external"> Python 里没有接口，如何写设计模式？</a><br><a href="http://www.zhihu.com/question/20053359" target="_blank" rel="external">为什么 Python  不支持函数重载？</a><br><a href="http://www.cnblogs.com/dolphin0520/archive/2013/04/03/2997499.html" target="_blank" rel="external"> Python面向对象编程(二)</a><br><a href="https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B" target="_blank" rel="external">鸭子类型</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="事故发生地">事故发生地</h1><p>在学习<a href="http://www.maiziedu.com/course/python/545-7480/"> Python 面向对象视频 之 鸭子类型与多态 </a>时看到这样两句话不得其解：</p>
<blockquote>
<p>非动态语言必须通过继承和接口实现多态<br>动态语言不需要实现接口</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Python" scheme="http://kiya-z.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://kiya-z.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Github Pages + Hexo + 多说 搭建博客全过程 - 基础篇]]></title>
    <link href="http://kiya-z.github.io/2015/11/10/%E4%BD%BF%E7%94%A8%20Github%20Pages%20+%20Hexo%20+%20%E5%A4%9A%E8%AF%B4%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%85%A8%E8%BF%87%E7%A8%8B%20-%20%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://kiya-z.github.io/2015/11/10/使用 Github Pages + Hexo + 多说 搭建博客全过程 - 基础篇/</id>
    <published>2015-11-10T03:27:33.000Z</published>
    <updated>2015-11-10T10:09:04.030Z</updated>
    <content type="html"><![CDATA[<p>看了很多博客，最后发现官方文档才是最可靠的！谨记！<br>本文只是自己尝试过程的记录，并非全部搭建方法。<br>&lt; 假设 git 已安装，Github 已注册 &gt;</p>
<blockquote>
<p>搭建环境：<br>os: Ubuntu 14.04.3 LTS<br>node: 4.2.2<br>hexo: 3.1.1<br>hexo theme: NexT<br>git: 1.9.1</p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="Step_1_安装_Node-js">Step 1 安装 Node.js</h2><ul>
<li>从<a href="https://nodejs.org/en/download/" target="_blank" rel="external">官网</a>下载系统对应的源码</li>
<li>依次执行以下命令解压编译安装<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf <span class="keyword">node</span><span class="identifier"></span><span class="title">-v4</span>.<span class="number">2.2</span>.tar.gz</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="Step_2_安装_Hexo">Step 2 安装 Hexo</h2><ul>
<li>执行以下命令<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="Step_3_搭建本地博客">Step 3 搭建本地博客</h2><ul>
<li><p>初始化一枚目录存放博客, 进入</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">hexo</span> init <span class="keyword">blog</span><br><span class="line"></span><span class="label">cd</span> <span class="keyword">blog</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>此时一个默认主题默认配置的 Hexo 博客就搭建完成了</p>
<ul>
<li><p>安装 Hexo 关于启动服务器的插件</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务器, 本地查看效果, 如果不指定端口，默认为4000</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 查看效果</p>
</li>
<li>使用 <strong>Ctrl+c</strong> 停止服务</li>
</ul>
<hr>
<h2 id="Step_4_主题和配置">Step 4 主题和配置</h2><p>在 <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a> 选择某个喜欢的主题，以 NexT 为例，假设当前目录为 “blog”。</p>
<ul>
<li>前往<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="external">NexT主题发布页面</a>下载主题的压缩包<br>(这是 Next 的稳定版本，我试用了最新版本，有一些问题故转为稳定版本)</li>
<li>解压并将目录更名为next</li>
<li>将 next 移动至 <strong>blog/themes/</strong> 目录下</li>
<li>将 blog 目录下的 <strong>_config.yml</strong> 文件中的 theme 属性值改为 next</li>
<li>此时主题更换成功，可启动 server 验证效果</li>
<li>对于 _config.yml 中的其他属性可根据情况自行修改，基本的有<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">title</span>: <span class="string">网站大标题</span></span><br><span class="line"><span class="attribute">subtitle</span>: <span class="string">网站小标题</span></span><br><span class="line"><span class="attribute">description</span>: <span class="string">你对于自己的描述</span></span><br><span class="line"><span class="attribute">author</span>: <span class="string">昵称</span></span><br><span class="line"><span class="attribute">avatar</span>: <span class="string">头像 (如:/images/avatar.jpg, images目录位于source目录下)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="Step_5_Github_的操作">Step 5 Github 的操作</h2><ul>
<li>新建仓库名为 <strong>github用户名.github.io</strong><br>进入仓库，点击右侧 settings，在 Github Pages 标签下可看到  <em>Your site is published at <a href="http://你的用户名.github.io" target="_blank" rel="external">http://你的用户名.github.io</a>.</em> 这句话。 这时便可直接访问，如我的就是 <a href="http://kiya-z.github.io">kiya-z.github.io</a>.</li>
</ul>
<hr>
<h2 id="Step_6_将博客部署到Github">Step 6 将博客部署到Github</h2><ul>
<li><p>安装 hexo 关于 git 的组件</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在_config.yml 中为 git 添加配置</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">    <span class="attribute">type</span>: git</span><br><span class="line">    <span class="attribute">repository</span>: 你的仓库地址(<span class="attribute">https</span>:<span class="comment">//github.com/用户名/用户名.github.io.git)</span></span><br><span class="line">    <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行(每次修改都要执行这些命令才能在github pages看到效果)</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>输入 github 的用户名和密码，部署完成之后访问你的如 <a href="http://kiya-z.github.io">kiya-z.github.io</a> 的网址即可看到和本地一样的效果。</p>
<hr>
<h2 id="Step_7_关于写博客">Step 7 关于写博客</h2><ul>
<li><p>新建博客</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"文章名"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用编辑器写好文章后执行生成+部署(那两个～)</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文章<br>直接删掉 <em>source/_post</em> 下对应文章的文件，然后重新生成+部署即可。有时可能要多刷新几次才能看到效果。</p>
</li>
</ul>
<hr>
<h2 id="Step_8_评论系统">Step 8 评论系统</h2><ul>
<li>登录 <a href="http://duoshuo.com/" target="_blank" rel="external">http://duoshuo.com/</a> 点击我要安装，创建站点。站点地址是 Github Pages 的地址，多说域名自己填写。</li>
<li>由于 NexT 主题已经支持了多说，我们不需要添加其他代码，只需要在 <strong>_config.yml</strong> 中添加一个名为 <strong>duoshuo_shortname</strong> 的字段，其值为<strong>多说域名中自己填写的那部分</strong>，并不是全部多说域名。</li>
</ul>
<hr>
<blockquote>
<p>结语：欢迎指正交流。Aha～</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>看了很多博客，最后发现官方文档才是最可靠的！谨记！<br>本文只是自己尝试过程的记录，并非全部搭建方法。<br>&lt; 假设 git 已安装，Github 已注册 &gt;</p>
<blockquote>
<p>搭建环境：<br>os: Ubuntu 14.04.3 LTS<br>node: 4.2.2<br>hexo: 3.1.1<br>hexo theme: NexT<br>git: 1.9.1</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Github" scheme="http://kiya-z.github.io/tags/Github/"/>
    
      <category term="Hexo" scheme="http://kiya-z.github.io/tags/Hexo/"/>
    
      <category term="Cool" scheme="http://kiya-z.github.io/categories/Cool/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://kiya-z.github.io/2015/11/09/hello-world/"/>
    <id>http://kiya-z.github.io/2015/11/09/hello-world/</id>
    <published>2015-11-09T03:11:11.000Z</published>
    <updated>2015-11-10T09:13:09.726Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
  </entry>
  
</feed>
